datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(RESIDENT)
  accounts      Account[]
  sessions      Session[]
  houses        House[]
}

enum Role {
  RESIDENT
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model House {
  id            String         @id @default(cuid())
  street        String?
  number        String?
  userId       String
  type          HouseType
  housePayments HousePayment[]
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt
}

enum HouseType {
  RESIDENCE
  POOLHOUSE
  COMERCIAL
}

model HousePayment {
  id      String  @id @default(cuid())
  houseId String?
  house   House?  @relation(fields: [houseId], references: [id], onDelete: Cascade)
  month   String?
  year    String?
  status  Status  @default(PENDING)
}

enum Status {
  PENDING
  PAID
}
